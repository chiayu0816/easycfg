package main

/*
This is a complete example showing how to use EasyCfg.
This example uses a manually defined configuration struct, but in actual use,
you should use the configuration struct automatically generated by EasyCfg.

To run this example:
go run examples/complete/main.go examples/complete/config.go
*/

import (
	"fmt"
	"log"

	"github.com/chiayu0816/easycfg"
)

func main() {
	// Create configuration struct instance
	cfg := &WsClientConfig{}

	// Load configuration
	if err := easycfg.LoadConfig("test_config.yml", cfg); err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
		return
	}

	// Print configuration information
	fmt.Println("Configuration loaded:")
	fmt.Printf("General Type: %s\n", cfg.General.Type)
	fmt.Printf("Server Port: %s\n", cfg.General.Server.Port)
	fmt.Printf("WS Listen Port: %d\n", cfg.General.WsListenPort)
	fmt.Printf("Redis Addresses: %v\n", cfg.Redis.Addrs)
	fmt.Printf("Logger Level: %s\n", cfg.Logger.Level)

	// Monitor configuration changes
	fmt.Println("\nMonitoring configuration file changes...")
	if err := easycfg.WatchConfig("test_config.yml", cfg, func() {
		fmt.Println("Configuration updated:")
		fmt.Printf("General Type: %s\n", cfg.General.Type)
		fmt.Printf("Server Port: %s\n", cfg.General.Server.Port)
		fmt.Printf("WS Listen Port: %d\n", cfg.General.WsListenPort)
		fmt.Printf("Redis Addresses: %v\n", cfg.Redis.Addrs)
		fmt.Printf("Logger Level: %s\n", cfg.Logger.Level)
	}); err != nil {
		log.Fatalf("Failed to monitor configuration: %v", err)
	}

	// Block the main thread, waiting for configuration changes
	select {}
}
